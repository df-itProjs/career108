---
const standards = ["12th Commerce", "12th Arts", "12th Science A", "12th Science B", "10th"]
---

<form
  id="enquiryForm"
  class="enquiry-form"
>
  <h2 class="title">Enquiry Form!</h2>

  <div class="auto-columns">
    <div class="form-control">
      <label for="name">Name</label>
      <input
        type="text"
        id="name"
        name="name"
        required
      />
    </div>

    <div class="form-control">
      <label for="email">Email</label>
      <input
        type="email"
        id="email"
        name="email"
        required
      />
    </div>
  </div>

  <div class="auto-columns">
    <div class="form-control">
      <label for="mobile">Mobile Number</label>
      <input
        type="tel"
        id="mobile"
        name="mobile"
        pattern="[0-9]{10}"
        required
      />
    </div>

    <div class="form-control">
      <label for=""></label>
      <button
        type="button"
        id="getOtpButton"
        style="
        background-color: var(--clr-accent);
        border: 2px solid var(--clr-accent);
        border-radius: 5px;
        font: inherit;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
      "
      >
        Get OTP
      </button>
    </div>
  </div>

  <div class="form-control">
    <label for="otp">OTP</label>
    <input
      type="text"
      id="otp"
      name="otp"
      pattern="[0-9]{6}"
      required
    />
  </div>

  <div class="auto-columns">
    <div class="form-control">
      <label for="state">State</label>
      <select
        name="state"
        id="state"
        required
      >
        <option value="">Select an Option</option>
      </select>
    </div>

    <div class="form-control">
      <label for="city">City</label>

      <select
        name="city"
        id="city"
        required
      >
        <option value="">Select an Option</option>
      </select>
    </div>
  </div>

  <div class="auto-columns">
    <div class="form-control">
      <label for="standard">Standard</label>

      <select
        name="standard"
        id="standard"
        required
      >
        <option value="">Select an Option</option>
        {standards.map((standard) => <option value={standard}>{standard}</option>)}
      </select>
    </div>

    <div class="form-control">
      <label for="course">Course</label>
      <select
        name="course"
        id="course"
        required
      >
        <option value="">Select an Option</option>
      </select>
    </div>
  </div>

  <label style="font-size: .8rem; line-height: 1.6; color: var(--clr-neutral-300);">
    <input
      type="checkbox"
      name="terms-and-conditions"
      id="terms-and-conditions"
      required
    />

    I agree to receive information by signing up on Career108 an initiative of Drona Education
    Foundation & its representatives to contact me with updates and notifications via
    Email/SMS/WhatsApp/Call. This will override DND/NDNC.
  </label>

  <button type="submit">Submit</button>
</form>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    stateCityHandler()

    const coursesToDisplay = {
      "12th Commerce": [
        "B.Voc Degree",
        "B.Com Degree",
        "BBA",
        "BCA",
        "iMBA",
        "B.Sc It",
        "CA",
        "CS",
        "Other professional courses like CMA, CWA etc.",
        "UPSC",
        "GPSC",
        "Other Government Exams",
        "CLAT",
        "Other Competitive Exams",
        "HOTEL MANAGEMENT",
        "LLB",
        "Other off bit careers like Sports, Gaming etc.",
        "Any Other Courses",
      ],
      "12th Arts": [
        "B.Voc Degree",
        "BA Degree",
        "BBA",
        "BCA",
        "iMBA",
        "B.Sc It",
        "Professional Courses lik CA, CS etc.",
        "Performing Arts Like Acting, Dancing, Singing etc.",
        "UPSC",
        "GPSC",
        "Other Government Exams",
        "CLAT",
        "Other Competitive Exams",
        "HOTEL MANAGEMENT",
        "LLB",
        "Other off bit careers like Sports, Gaming etc.",
        "Any Other Courses",
      ],
      "12th Science A": [
        "Mechanical Engineering ",
        "Computer Science / IT Engineering ",
        "Electrical Engineering ",
        "Civil Engineering ",
        "Electronics And Comm. Engineering ",
        "Chemical Engineering ",
        "Other Engineering Degrees",
        "B.Sc in Physics ",
        "B.Sc in Chemistry",
        "B.Sc in Mathematics ",
        "B.Sc in  Biology",
        "B.Sc in Microbiology",
        "B.Sc in Biotechnology",
        "Other Pure Science Degrees",
        "B.Voc Degrees",
        "Other Degrees like BBA, BCA",
        "Professional Courses like CA, CS etc.",
        "Off-bit careers like Sports, Gaming etc.",
        "UPSC",
        "GPSC",
        "Other Government Exams",
        "NATA",
        "CLAT",
        "NDA",
        "Other Competitive Exams",
        "Any Other Courses",
      ],
      "12th Science B": [
        "MBBS ",
        "BDS ",
        "BAMS",
        "BHMS ",
        "B.Pharm ",
        "Other Medical Degrees",
        "ANM, GNM / B.Sc Nursing",
        "Physiotherapy",
        "MLT, DMLT, X-ray Technology",
        "Other Healthcare Courses",
        "B.Sc in Physics ",
        "B.Sc in Chemistry",
        "B.Sc in Mathematics ",
        "B.Sc in  Biology",
        "B.Sc in Microbiology",
        "B.Sc in Biotechnology",
        "Other Pure Science  Degree",
        "B.Voc Degree",
        "Other Degrees like BBA, BCA",
        "Professional Courses like CA, CS etc.",
        "Off-bit careers like Sports, Gaming, etc.",
        "UPSC",
        "GPSC",
        "Other Government Exams",
        "NATA",
        "CLAT",
        "NDA",
        "Other Competitive Exams",
        "Any Other Courses",
      ],
      "10th": [
        "11th - 12th Commerce",
        "11th - 12th Science",
        "11th - 12th Arts",
        "D.Voc",
        "Dimploma Engineering",
        "ITI",
        "Any other courses",
      ],
    }

    document.querySelector("#standard").addEventListener("change", (event: any) => {
      const courseSelect = document.querySelector("#course")
      courseSelect.innerHTML = "<option value=''>Select an Option</option>"
      coursesToDisplay[event.target.value].forEach((course) => {
        const option = document.createElement("option")
        option.value = course
        option.textContent = course
        courseSelect.appendChild(option)
      })
    })

    const enquiryForm = document.querySelector("#enquiryForm") as HTMLFormElement

    if (!enquiryForm) {
      console.error("Form not found!")
      return
    }

    const getOtpButton = document.querySelector("#getOtpButton")
    const mobileInput = document.querySelector("#mobile") as HTMLInputElement

    let verificationKey: string

    const SEND_OTP_API = "https://api.skill.college/career108/send-otp"
    const GENERATE_LEAD_API = "https://api.skill.college/career108/generate-lead"

    let submitCount = 0

    if (getOtpButton && mobileInput) {
      getOtpButton.addEventListener("click", async () => {
        console.log("clicked")

        const phoneNumber = mobileInput.value
        const phoneRegex = /^[0-9]{10}$/
        if (!phoneRegex.test(phoneNumber)) {
          alert("Please enter a valid 10-digit mobile number.")
          return
        }

        try {
          const response = await fetch(`${SEND_OTP_API}/${phoneNumber}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          })

          if (!response.ok) {
            alert("Failed to send OTP. Please try again.")
            console.error("API Error:", response.status, response.statusText)
            return
          }

          alert(`OTP sent successfully to ${phoneNumber}.`)
          const result = await response.json()
          verificationKey = result.verificationKey
        } catch (error) {
          alert("An error occurred while sending OTP.")
          console.error("Error:", error)
        }
      })
    }

    enquiryForm.addEventListener("submit", async (event) => {
      event.preventDefault()

      enquiryForm.reportValidity()

      if (!verificationKey) {
        alert("Please generate OTP first.")
        return
      }

      try {
        const formData = new FormData(enquiryForm)
        const body = Object.fromEntries(formData.entries())

        const referrer = document.referrer

        body["otp_verification_key"] = verificationKey
        body["source"] = referrer

        const response = await fetch(GENERATE_LEAD_API, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(body),
        })

        if (response.ok) {
          const result = await response.json()

          enquiryForm.reset()
          submitCount++
          open("/career-chart", "_self")
        } else {
          const errorResponse = await response.json()
          console.error("Failed to generate lead:", errorResponse)
          alert(`Failed to submit form: ${errorResponse.detail || "Unknown Error"}`)
        }
      } catch (error) {
        console.error("Error retrieving form data:", error)
        alert("An error occurred while submitting the form.")
      }
    })
  })

  function stateCityHandler() {
    const STATE_API_URL = "https://countriesnow.space/api/v0.1/countries/states"
    const CITY_API_URL = "https://countriesnow.space/api/v0.1/countries/state/cities"

    const stateSelectElement = document.querySelector("#state") as HTMLSelectElement
    const citySelectElement = document.querySelector("#city") as HTMLSelectElement

    fetch(STATE_API_URL, {
      method: "POST",
      body: JSON.stringify({ country: "India" }),
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then((response) => {
        console.log(response)
        return response.json()
      })
      .then((data) => {
        console.log(data)
        stateSelectElement.innerHTML = "<option value=''>Select an Option</option>"
        data.data.states.forEach((state: { name: string }) => {
          const option = document.createElement("option")
          option.value = state.name
          option.textContent = state.name
          stateSelectElement.appendChild(option)
        })
      })
      .catch((e) => {
        console.error(e)
        alert("Failed to fetch states.")
      })

    stateSelectElement.addEventListener("change", (e: any) => {
      const selectedState = e.target.value

      fetch(CITY_API_URL, {
        method: "POST",
        body: JSON.stringify({ country: "India", state: "Gujarat" }),
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((response) => {
          console.log(response)

          return response.json()
        })
        .then((data) => {
          console.log(data)

          citySelectElement.innerHTML = "<option value=''>Select an Option</option>"
          data.data.forEach((city: string) => {
            const option = document.createElement("option")
            option.value = city
            option.textContent = city
            citySelectElement.appendChild(option)
          })
        })
        .catch((e) => {
          console.error(e)
          alert("Failed to fetch cities.")
        })
    })
  }

  function getQueryParam(param: string): string | null {
    const urlParams = new URLSearchParams(window.location.search)
    return urlParams.get(param)
  }
</script>

<style>
  .enquiry-form {
    padding: 2rem;
    padding-block-start: 1.5rem;
    background-color: rgba(from var(--clr-neutral) r g b / 0.1);
    border-radius: 1rem;
    border: 2px solid var(--clr-accent);

    display: grid;
    gap: 1rem;

    .title {
      font-size: 2rem;
      text-align: center;
      color: var(--clr-accent);
    }

    button[type="submit"] {
      background-color: var(--clr-accent);
      padding: 0.7em 1em;
      border: 2px solid var(--clr-accent);
      border-radius: 5px;
      font: inherit;
      font-weight: 600;
      cursor: pointer;
      transition:
        background-color 0.3s ease,
        color 0.3s ease;

      &:hover,
      &:focus-visible {
        background-color: var(--clr-accent-dark);
        color: var(--clr-neutral);
      }
    }
  }

  .form-control {
    display: grid;
    gap: 0.5em;

    label:has(+ :required) {
      &::after {
        content: " *";
        color: var(--clr-accent);
      }
    }

    input,
    select {
      font: inherit;
      background-color: var(--clr-neutral);
      color: var(--clr-primary);
      border: 1px solid var(--clr-accent);
      border-radius: 5px;
      padding: 0.5em;

      &:user-invalid {
        background-color: color-mix(in oklab, red 70%, var(--clr-neutral) 100%);
      }
    }
  }

  .auto-columns {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    gap: 1rem;
  }
</style>
